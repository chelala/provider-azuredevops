//go:build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranch) DeepCopyInto(out *RepositoryBranch) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranch.
func (in *RepositoryBranch) DeepCopy() *RepositoryBranch {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranch)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryBranch) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranchInitParameters) DeepCopyInto(out *RepositoryBranchInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RefCommitID != nil {
		in, out := &in.RefCommitID, &out.RefCommitID
		*out = new(string)
		**out = **in
	}
	if in.RefTag != nil {
		in, out := &in.RefTag, &out.RefTag
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranchInitParameters.
func (in *RepositoryBranchInitParameters) DeepCopy() *RepositoryBranchInitParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranchInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranchList) DeepCopyInto(out *RepositoryBranchList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RepositoryBranch, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranchList.
func (in *RepositoryBranchList) DeepCopy() *RepositoryBranchList {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranchList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RepositoryBranchList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranchObservation) DeepCopyInto(out *RepositoryBranchObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LastCommitID != nil {
		in, out := &in.LastCommitID, &out.LastCommitID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RefBranch != nil {
		in, out := &in.RefBranch, &out.RefBranch
		*out = new(string)
		**out = **in
	}
	if in.RefCommitID != nil {
		in, out := &in.RefCommitID, &out.RefCommitID
		*out = new(string)
		**out = **in
	}
	if in.RefTag != nil {
		in, out := &in.RefTag, &out.RefTag
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranchObservation.
func (in *RepositoryBranchObservation) DeepCopy() *RepositoryBranchObservation {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranchObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranchParameters) DeepCopyInto(out *RepositoryBranchParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.RefBranch != nil {
		in, out := &in.RefBranch, &out.RefBranch
		*out = new(string)
		**out = **in
	}
	if in.RefBranchRef != nil {
		in, out := &in.RefBranchRef, &out.RefBranchRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RefBranchSelector != nil {
		in, out := &in.RefBranchSelector, &out.RefBranchSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.RefCommitID != nil {
		in, out := &in.RefCommitID, &out.RefCommitID
		*out = new(string)
		**out = **in
	}
	if in.RefTag != nil {
		in, out := &in.RefTag, &out.RefTag
		*out = new(string)
		**out = **in
	}
	if in.RepositoryID != nil {
		in, out := &in.RepositoryID, &out.RepositoryID
		*out = new(string)
		**out = **in
	}
	if in.RepositoryIDRef != nil {
		in, out := &in.RepositoryIDRef, &out.RepositoryIDRef
		*out = new(v1.Reference)
		(*in).DeepCopyInto(*out)
	}
	if in.RepositoryIDSelector != nil {
		in, out := &in.RepositoryIDSelector, &out.RepositoryIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranchParameters.
func (in *RepositoryBranchParameters) DeepCopy() *RepositoryBranchParameters {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranchParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranchSpec) DeepCopyInto(out *RepositoryBranchSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranchSpec.
func (in *RepositoryBranchSpec) DeepCopy() *RepositoryBranchSpec {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranchSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RepositoryBranchStatus) DeepCopyInto(out *RepositoryBranchStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RepositoryBranchStatus.
func (in *RepositoryBranchStatus) DeepCopy() *RepositoryBranchStatus {
	if in == nil {
		return nil
	}
	out := new(RepositoryBranchStatus)
	in.DeepCopyInto(out)
	return out
}
