// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RepositoryBranchInitParameters struct {

	// The name of the branch in short format not prefixed with refs/heads/.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The commit object ID to create the branch from. Conflict with ref_branch, ref_tag.
	RefCommitID *string `json:"refCommitId,omitempty" tf:"ref_commit_id,omitempty"`

	// The reference to the tag to create the branch from, in <name> or refs/tags/<name> format. Conflict with ref_branch, ref_commit_id.
	RefTag *string `json:"refTag,omitempty" tf:"ref_tag,omitempty"`
}

type RepositoryBranchObservation struct {

	// The ID of the Git Repository Branch, in the format <repository_id>:<name>.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The commit object ID of last commit on the branch.
	LastCommitID *string `json:"lastCommitId,omitempty" tf:"last_commit_id,omitempty"`

	// The name of the branch in short format not prefixed with refs/heads/.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The reference to the source branch to create the branch from, in <name> or refs/heads/<name> format. Conflict with ref_tag, ref_commit_id.
	RefBranch *string `json:"refBranch,omitempty" tf:"ref_branch,omitempty"`

	// The commit object ID to create the branch from. Conflict with ref_branch, ref_tag.
	RefCommitID *string `json:"refCommitId,omitempty" tf:"ref_commit_id,omitempty"`

	// The reference to the tag to create the branch from, in <name> or refs/tags/<name> format. Conflict with ref_branch, ref_commit_id.
	RefTag *string `json:"refTag,omitempty" tf:"ref_tag,omitempty"`

	// The ID of the repository the branch is created against.
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`
}

type RepositoryBranchParameters struct {

	// The name of the branch in short format not prefixed with refs/heads/.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The reference to the source branch to create the branch from, in <name> or refs/heads/<name> format. Conflict with ref_tag, ref_commit_id.
	// +crossplane:generate:reference:type=github.com/chelala/provider-azuredevops/apis/gitrepositorybranch/v1alpha1.RepositoryBranch
	// +kubebuilder:validation:Optional
	RefBranch *string `json:"refBranch,omitempty" tf:"ref_branch,omitempty"`

	// Reference to a RepositoryBranch in gitrepositorybranch to populate refBranch.
	// +kubebuilder:validation:Optional
	RefBranchRef *v1.Reference `json:"refBranchRef,omitempty" tf:"-"`

	// Selector for a RepositoryBranch in gitrepositorybranch to populate refBranch.
	// +kubebuilder:validation:Optional
	RefBranchSelector *v1.Selector `json:"refBranchSelector,omitempty" tf:"-"`

	// The commit object ID to create the branch from. Conflict with ref_branch, ref_tag.
	// +kubebuilder:validation:Optional
	RefCommitID *string `json:"refCommitId,omitempty" tf:"ref_commit_id,omitempty"`

	// The reference to the tag to create the branch from, in <name> or refs/tags/<name> format. Conflict with ref_branch, ref_commit_id.
	// +kubebuilder:validation:Optional
	RefTag *string `json:"refTag,omitempty" tf:"ref_tag,omitempty"`

	// The ID of the repository the branch is created against.
	// +crossplane:generate:reference:type=github.com/chelala/provider-azuredevops/apis/gitrepository/v1alpha1.Repository
	// +crossplane:generate:reference:extractor=github.com/chelala/provider-azuredevops/apis/gitrepository/v1alpha1.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RepositoryID *string `json:"repositoryId,omitempty" tf:"repository_id,omitempty"`

	// Reference to a Repository in gitrepository to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDRef *v1.Reference `json:"repositoryIdRef,omitempty" tf:"-"`

	// Selector for a Repository in gitrepository to populate repositoryId.
	// +kubebuilder:validation:Optional
	RepositoryIDSelector *v1.Selector `json:"repositoryIdSelector,omitempty" tf:"-"`
}

// RepositoryBranchSpec defines the desired state of RepositoryBranch
type RepositoryBranchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RepositoryBranchParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RepositoryBranchInitParameters `json:"initProvider,omitempty"`
}

// RepositoryBranchStatus defines the observed state of RepositoryBranch.
type RepositoryBranchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RepositoryBranchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryBranch is the Schema for the RepositoryBranchs API. Manages a Git Repository Branch.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuredevops}
type RepositoryBranch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   RepositoryBranchSpec   `json:"spec"`
	Status RepositoryBranchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RepositoryBranchList contains a list of RepositoryBranchs
type RepositoryBranchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RepositoryBranch `json:"items"`
}

// Repository type metadata.
var (
	RepositoryBranch_Kind             = "RepositoryBranch"
	RepositoryBranch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RepositoryBranch_Kind}.String()
	RepositoryBranch_KindAPIVersion   = RepositoryBranch_Kind + "." + CRDGroupVersion.String()
	RepositoryBranch_GroupVersionKind = CRDGroupVersion.WithKind(RepositoryBranch_Kind)
)

func init() {
	SchemeBuilder.Register(&RepositoryBranch{}, &RepositoryBranchList{})
}
